#!/usr/bin/env python
# ----------------------------------------------------------------------
# Copyright (c) 2016, The Regents of the University of California All
# rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#     * Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials provided
#       with the distribution.
#
#     * Neither the name of The Regents of the University of California
#       nor the names of its contributors may be used to endorse or
#       promote products derived from this software without specific
#       prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL REGENTS OF THE
# UNIVERSITY OF CALIFORNIA BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
# OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
# TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
# USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
# DAMAGE.
# ----------------------------------------------------------------------
# Filename: tinker.py
# Version: 0.1 
# Description: Top-level tinker script to generate a custom board-support
# package for the Altera OpenCL Compiler
# Author: Dustin Richmond

# Import Python Utilities
import os, shutil, xml.etree.ElementTree as et, argparse as ap
import sys
import json
from xml.dom import minidom
# Import Tinker Objects
import Tinker, Board, Description, Specification, System, Top

def buildargs(par):
    par.add_argument("-l", "--list-boards", action="store_true",
                    help="List the available board skeletons available to Tinker")
    par.add_argument("-i", "--get-board-info",nargs=2, action="store",metavar=("<version>","<board_name>"),
                    help="Get info about a specific board and version")
    par.add_argument("-g","--generate", action="store",nargs=3,
                    metavar=("<path-to-specification>","<version>","<board_name>"),
                    help="Generate a Board Support Package (BSP) using"+
                    "the specification within the text file")
    par.add_argument("-o", "--output_path", action="store",
                    help="Output path for the generated board",
                    default=os.getcwd())
    
def list_boards(tinker):
    versions = tinker.get_versions()
    print "Supported Quartus Versions:",
    for version in versions:
        print version,
    print

    version = ""
    name = ""
    for version in versions:
        boards = tinker.get_boards_version(version)
        print "Boards available for %s:" % version
        for board in boards:
            print "\t" + board + " ",
        print

    print "For more information about the interfaces and memories"
    print "available on a board, use the -i flag, for example:"
    print "\tboardgen -i %s %s" % (version,name)

def main():
    par = ap.ArgumentParser(description="Generate a Board Support Package for Altera's OpenCL Compiler")
    buildargs(par)
    args = par.parse_args()

    if(args.list_boards):
        tinker = Tinker.Tinker()
        list_boards(tinker)
        
    elif(args.get_board_info):
        version = args.get_board_info[0]
        board = args.get_board_info[1]
        tinker = Tinker.Tinker(version=version, board=board)
        tinker.check_board(version, board)
        
        print "Getting Info for Version: %s, Board: %s" % (version, board)
        print json.dumps(Board.Board(t, version, board), indent = 2)
        
    elif(args.generate):
        path = args.generate[0]
        version = args.generate[1]
        board = args.generate[2]
        
        tinker = Tinker.Tinker(version=version,
                               board=board,
                               output=args.output_path)

        b = Board.Board(tinker)
        d = Description.Description(path, b)
        
        qsys = System.System(tinker, b, d)
        top = Top.Top(tinker, b, d)
        spec = Specification.Specification(tinker, b, d, False)
        specification = Specification.Specification(tinker, b, d, True)
        
        skel_path = tinker.get_path_skel()
        out_path = tinker.get_path_output(b, d)
        try:
            shutil.copytree(skel_path, out_path)
        except OSError:
            sys.exit("Error: Board Output Directory %s Exists!" % tinker.get_name(b, d));

        shutil.copytree(tinker.get_path_tcl(), out_path + "/tcl/")
        qsys.write(out_path)
        spec.write(out_path)
        specification.write(out_path)
        top.write(out_path)
        exit(1)
                
        print "Board %s generated" % Tinker.get_name(b, d)
        
if __name__ == "__main__":
    main()
