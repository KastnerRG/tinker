#!/usr/bin/env python
import argparse as ap
import os
import shutil
import xml.etree.ElementTree as et
from xml.dom import minidom

import Board
import Specification
import Tinker
def checkdist(tp):
    if(not os.path.exists(tp)):
        print "ERROR: Path %s does not exist", tp
        exit(1)

def checkvar(v):
    if(v not in os.environ):
        print "ERROR: Environment Variable %s not set",v
        exit(1)

def buildargs(par):
    par.add_argument("-l", "--list-boards", action="store_true",
                    help="List the available board skeletons available to Tinker")
    par.add_argument("-i", "--get-board-info",nargs=2, action="store",metavar=("<version>","<board_name>"),
                    help="Get info about a specific board and version")
    par.add_argument("-g","--generate", action="store",nargs=3,
                    metavar=("<path-to-specification>","<version>","<board_name>"),
                    help="Generate a Board Support Package (BSP) using"+
                    "the specification within the text file")

def get_available_versions(path):
    p = path + "boards/versions.xml"
    r = et.parse(p)
    versions = []
    for e in r.findall("./release/[@version]"):
        versions.append(e.get("version"))
    return versions
    
def get_available_boards(path, ver):
    p = path + "boards/versions.xml"
    r = et.parse(p)
    es = r.findall("./release/[@version='%s']" % str(ver))
    if(len(es) > 1):
        print "ERROR: Multiple matches for version %s" % str(ver)
    e = es[0]

    p = os.path.expandvars(e.get("path")) + "/boards.xml"
    boardr = et.parse(p)
    names = []
    for board in boardr.iterfind(("./board/[@version='%s']" % ver)):
        name = board.get("name")
        names.append(name)
        
    return names

def list_boards(tinker_path):
    versions = get_available_versions(tinker_path)
    print "Supported Quartus Versions:",
    for ver in versions:
        print ver,
    print

    version = ""
    name = ""
    for ver in versions:
        boards = get_available_boards(tinker_path, ver)
        print "Boards available for %s:" % ver
        for board in boards:
            print "\t" + board + " ",
        print

    print "For more information about the interfaces and memories"
    print "available on a board, use the -i flag, for example:"
    print "\tboardgen -i %s %s" % (version,name)

checkvar("TINKER_PATH")
checkvar("TCLXML_PATH")
tinker_path = os.path.expandvars("${TINKER_PATH}") + "/"
checkdist(tinker_path)

par = ap.ArgumentParser(description="Generate a Board Support Package for Altera's OpenCL Compiler")
buildargs(par)
args = par.parse_args()


if(args.list_boards):
    list_boards(tinker_path)
elif(args.get_board_info):
    version = args.get_board_info[0]
    board = args.get_board_info[1]
    # TODO: Build path from XML file
    b = Board.Board(tinker_path + "/boards/%s/%s/%s.xml" % (version,board,board), version, board)
    d = b.get_info()
    print "Getting Info for Board %s, Version %s" % (board, version)
    b.print_info(0)
elif(args.generate):
    path = args.generate[0]
    version = args.generate[1]
    board = args.generate[2]
    # TODO: Check if board is available...
    skel_path = tinker_path + "/boards/%s/%s/" % (version,board)
    b = Board.Board(skel_path + "%s.xml" % board, version, board)
    s = Specification.Specification(path)
    outdir_path = "./" + board + "_" + s.get_info()["Name"] + "/"
    try:
        shutil.rmtree(outdir_path)
    except:
        pass

    shutil.copytree(skel_path, outdir_path)

    # Build Board Specification and Board Spec files
    specification = b.build_spec(s, version, specification=True)
    specification_fp = open(outdir_path + "board_specification.xml","w")
    specification_fp.write(Tinker.prettify(specification))
    specification_fp.close()
    
    spec = b.build_spec(s, version, specification=False) #todo
    spec_et = et.ElementTree(spec)
    spec_fp = open(outdir_path + "board_spec.xml","w")
    spec_fp.write(Tinker.prettify(spec))
    spec_fp.close()

    # Build System.qsys
    sys = b.gen_system(s,outdir_path + "system.qsys")
    sys_et = et.ElementTree(sys)
    sys_et.write(outdir_path + "system.qsys", encoding="UTF-8", xml_declaration=True)

    # Move TCL Files
    shutil.copytree(tinker_path + "/tcl/", outdir_path + "/tcl/")

    # Generate Macro file
    macros = b.gen_macros(s)
    macro_fp = open(outdir_path + "tinker.vh", "w")
    macro_fp.write(macros)
    macro_fp.close()
