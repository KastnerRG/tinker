#!/usr/bin/env python
# ----------------------------------------------------------------------
# Copyright (c) 2016, The Regents of the University of California All
# rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#     * Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials provided
#       with the distribution.
#
#     * Neither the name of The Regents of the University of California
#       nor the names of its contributors may be used to endorse or
#       promote products derived from this software without specific
#       prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL REGENTS OF THE
# UNIVERSITY OF CALIFORNIA BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
# OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
# TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
# USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
# DAMAGE.
# ----------------------------------------------------------------------
# Filename: tinker.py
# Version: 0.1 
# Description: Top-level tinker script to generate a custom board-support
# package for the Altera OpenCL Compiler
# Author: Dustin Richmond

# Import Python Utilities
import os, shutil, xml.etree.ElementTree as et, argparse as ap, sys as System
import json
from xml.dom import minidom
# Import Tinker Objects
import Tinker, Board, Description

def buildargs(par):
    par.add_argument("-l", "--list-boards", action="store_true",
                    help="List the available board skeletons available to Tinker")
    par.add_argument("-i", "--get-board-info",nargs=2, action="store",metavar=("<version>","<board_name>"),
                    help="Get info about a specific board and version")
    par.add_argument("-g","--generate", action="store",nargs=3,
                    metavar=("<path-to-specification>","<version>","<board_name>"),
                    help="Generate a Board Support Package (BSP) using"+
                    "the specification within the text file")
    
def list_boards(tinker):
    versions = tinker.get_versions()
    print "Supported Quartus Versions:",
    for version in versions:
        print version,
    print

    version = ""
    name = ""
    for version in versions:
        boards = tinker.get_boards(version)
        print "Boards available for %s:" % version
        for board in boards:
            print "\t" + board + " ",
        print

    print "For more information about the interfaces and memories"
    print "available on a board, use the -i flag, for example:"
    print "\tboardgen -i %s %s" % (version,name)

def main():
    tinker = Tinker.Tinker()
    par = ap.ArgumentParser(description="Generate a Board Support Package for Altera's OpenCL Compiler")
    buildargs(par)
    args = par.parse_args()

    if(args.list_boards):
        list_boards(tinker)
        
    elif(args.get_board_info):
        version = args.get_board_info[0]
        board = args.get_board_info[1]
        tinker.check_board(version, board)
        
        print "Getting Info for Version: %s, Board: %s" % (version, board)
        s = Board.Board(version, board)
        print json.dumps(s, indent = 4)
        
    elif(args.generate):
        path = args.generate[0]
        version = args.generate[1]
        board = args.generate[2]
        tinker.check_board(version, board)

        # p = Package(path, version, board)
        s = Description.Description(path)
        print json.dumps(s,indent=2)
        b = Board.Board(version, board)
        exit(1)
        print b
        
        board_name = board + "_" + s.get_info()["Name"]
        outdir_path = "./" + board_name + "/"

        # TODO: remove get_board_path call?
        src_path = tinker.get_board_path(version, board)
        try:
            shutil.copytree(src_path, outdir_path)
        except OSError:
            System.exit("Error: Board Output Directory %s Exists!" % outdir_path);

        # Build Board Specification and Board Spec files
        specification = b.build_spec(s, version, specification=True)
        specification_fp = open(outdir_path + "board_specification.xml","w")
        specification_fp.write(Tinker.prettify(specification))
        specification_fp.close()
        
        spec = b.build_spec(s, version, specification=False)
        spec_fp = open(outdir_path + "board_spec.xml","w")
        spec_fp.write(Tinker.prettify(spec))
        spec_fp.close()
        
        # Build System.qsys
        sys = b.gen_system(s,outdir_path + "system.qsys")
        sys_et = et.ElementTree(sys)
        sys_et.write(outdir_path + "system.qsys", encoding="UTF-8", xml_declaration=True)
        
        # Move TCL Files
        shutil.copytree(tinker.get_tcl_path(version), outdir_path + "/tcl/")
        
        # Generate Macro file
        macros = b.gen_macros(s)
        macro_fp = open(outdir_path + "tinker.vh", "w")
        macro_fp.write(macros)
        macro_fp.close()

        print "Board %s generated" % board_name
        
if __name__ == "__main__":
    main()
